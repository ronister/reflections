How did viewing a diff between two versions of a file help you see the bug that
was introduced?
    "diff" (or "FC" in windows), shows only lines that have changed, instead of having to search through the whole file (which might be very big)

How could having easy access to the entire history of a file make you a better
programmer in the long term?

    1. compare broken versions of code to working versions, enables me to find bugs more quickly.
    2. I might also be less afraid of breaking my code and more willing to try rewriting it if I know that I can always go back to a working version.
    3. if I forget why I wrote some line of code, I might understand better by finding the commit where it was introduced and getting the context for that change.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
    
    manually choosing when to create a commit (like Git):
        pros: when I save versions myself, I can create a meaningful name for each version, which makes the versions a lot easier to navigate.
        cons: more effort on my part.
    Having versions saved automatically (like Google Docs):
        pros: less effort on my part.
        cons: 1. with auto save there is no guarantee a working version would ever be saved.
                 If I wanted to compare a broken version to a previous working version, I might not actually have a working version. 
              2. can be difficult to understand what changes are introduced in each version.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    in code, many times, a single logical change may touch more than one file, and it would be nice to group the entire change into one commit.
    but when files are independent, like several doc files, tracking them together introduces unnecessary overhead when looking back through the history.
    If I changed two unrelated files, then committed the changes together, it would be harder to revert to a previous version of one file,
    without reverting to a previous version of another, which I probably wouldn't want to do.

How can you use the commands git log and git diff to view the history of files?
    
    "git log" shows all the commits, or versions, of my files that I have ever saved 
    I can use that to see the message for each commit, and get a quick idea of the sorts of changes that have been made.
    "git diff"  can be used to dig deeper into any commit, compare that commit to the previous commit and see exactly what changes were introduced.
    btw, "git show" is used to diff a commit against it's parent, when i don't know which parent it is.

How might using version control make you more confident to make changes that
could break something?
    
    1. If I have previous versions saved, it will be easy to restore a previous, working version of the code if I mess something up.
    2. it will be easier to figure out why the code broke since I won't have to worry about forgetting what I changed.

Now that you have your workspace set up, what do you want to try using Git for?

    1. i use git for mu coding projects, in Java, Python stc.
    2. these reflections.
    3. for my resume. 

